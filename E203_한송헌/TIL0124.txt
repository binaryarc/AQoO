웹 푸시 알람 구현

1. 클라이언트 단에서 알림 허용 및 차단을 함과 동시에 FCM에 구독요청을 한다.
(=== 클라이언트 코드에 설정된 FCM 인증을 거쳐 해당 프로젝트와 연관이 있다는 것을 보여주는 작업이다! + 자신에게 할당해 줄 디바이스 토큰을 요청한다.)
2. FCM은 클라이언트가 요청한 구독에 대해 응답을 해준다.
(===사용자의 요청정보를 바탕으로 확인을 한 후, 디바이스 토큰을 보내준다.)
사실 여기까지만 해도 프론트 단에 넘어온 디바이스토큰을 바탕으로 FCM 내부에서 토큰을 가지고 푸시 메시지를 보내고 확인할 수 있다!
3. 디바이스 토큰을 받고 난 후, 메인서버 단에 디바이스 토큰을 넘겨준다!
(=== 마치 카카오 로그인과 비슷한 느낌이다!)
4. 메인서버는 이 디바이스 토큰을 저장하고, 좋아요나 댓글이 달렸을 때 해당 메시지를 가공해서 디바이스 토큰과 함께 FCM에 메시지를 전송한다.
(=== 디바이스 토큰과 사용자의 정보를 디비에 매핑 시켜놓는다.)
5. FCM은 받은 디바이스 토큰을 바탕으로 전달해준 메시지를 토큰에 해당하는 기기로 푸시알림을 쏴준다.

참고사이트
https://velog.io/@chy8165/FCM%EC%9D%84-%EC%9D%B4%EC%9A%A9%ED%95%B4-%EC%9B%B9-%ED%91%B8%EC%8B%9C%EC%95%8C%EB%A6%BC-%EA%B5%AC%ED%98%84-%EC%9B%B9-PWA

https://velog.io/@chy8165/FCM%EC%9D%84-%EC%9D%B4%EC%9A%A9%ED%95%B4-%EC%9B%B9-%ED%91%B8%EC%8B%9C%EC%95%8C%EB%A6%BC-%EA%B5%AC%ED%98%84-%EC%9B%B9-PWA

바뀐 FCM 방식
더이상 서버키를 지원하지 않기 때문에 json 형식의 키를 사용해야 함.

웹 푸시 디렉토리 구조
Backend
src
├── main
│   ├── java
│   │   └── com
│   │       └── example
│   │           └── pushnotification
│   │               ├── controller
│   │               │   └── PushNotificationController.java
│   │               ├── service
│   │               │   └── PushNotificationService.java
│   │               ├── repository
│   │               │   └── PushSubscriptionRepository.java
│   │               └── model
│   │                   └── PushSubscription.java
│   ├── resources
│   │   └── application.propertie

Frontend (Next.js)
pages
├── index.js
└── service-worker.js

public
├── firebase-messaging-sw.js

components
└── PushNotificationButton.js

styles
└── Home.module.css

진행 상황
현재 백엔드는 postman으로 작동 확인 그러나 프론트엔드 구현 중