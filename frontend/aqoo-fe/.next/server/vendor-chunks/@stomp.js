"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@stomp";
exports.ids = ["vendor-chunks/@stomp"];
exports.modules = {

/***/ "(ssr)/./node_modules/@stomp/stompjs/esm6/augment-websocket.js":
/*!***************************************************************!*\
  !*** ./node_modules/@stomp/stompjs/esm6/augment-websocket.js ***!
  \***************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   augmentWebsocket: () => (/* binding */ augmentWebsocket)\n/* harmony export */ });\n/**\n * @internal\n */\nfunction augmentWebsocket(webSocket, debug) {\n    webSocket.terminate = function () {\n        const noOp = () => { };\n        // set all callbacks to no op\n        this.onerror = noOp;\n        this.onmessage = noOp;\n        this.onopen = noOp;\n        const ts = new Date();\n        const id = Math.random().toString().substring(2, 8); // A simulated id\n        const origOnClose = this.onclose;\n        // Track delay in actual closure of the socket\n        this.onclose = closeEvent => {\n            const delay = new Date().getTime() - ts.getTime();\n            debug(`Discarded socket (#${id})  closed after ${delay}ms, with code/reason: ${closeEvent.code}/${closeEvent.reason}`);\n        };\n        this.close();\n        origOnClose?.call(webSocket, {\n            code: 4001,\n            reason: `Quick discarding socket (#${id}) without waiting for the shutdown sequence.`,\n            wasClean: false,\n        });\n    };\n}\n//# sourceMappingURL=augment-websocket.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHN0b21wL3N0b21wanMvZXNtNi9hdWdtZW50LXdlYnNvY2tldC5qcyIsIm1hcHBpbmdzIjoiOzs7O0FBQUE7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDZEQUE2RDtBQUM3RDtBQUNBO0FBQ0E7QUFDQTtBQUNBLHdDQUF3QyxHQUFHLGtCQUFrQixNQUFNLHdCQUF3QixnQkFBZ0IsR0FBRyxrQkFBa0I7QUFDaEk7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpREFBaUQsR0FBRztBQUNwRDtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9hcW9vLWZlLy4vbm9kZV9tb2R1bGVzL0BzdG9tcC9zdG9tcGpzL2VzbTYvYXVnbWVudC13ZWJzb2NrZXQuanM/M2NjZiJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBpbnRlcm5hbFxuICovXG5leHBvcnQgZnVuY3Rpb24gYXVnbWVudFdlYnNvY2tldCh3ZWJTb2NrZXQsIGRlYnVnKSB7XG4gICAgd2ViU29ja2V0LnRlcm1pbmF0ZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgY29uc3Qgbm9PcCA9ICgpID0+IHsgfTtcbiAgICAgICAgLy8gc2V0IGFsbCBjYWxsYmFja3MgdG8gbm8gb3BcbiAgICAgICAgdGhpcy5vbmVycm9yID0gbm9PcDtcbiAgICAgICAgdGhpcy5vbm1lc3NhZ2UgPSBub09wO1xuICAgICAgICB0aGlzLm9ub3BlbiA9IG5vT3A7XG4gICAgICAgIGNvbnN0IHRzID0gbmV3IERhdGUoKTtcbiAgICAgICAgY29uc3QgaWQgPSBNYXRoLnJhbmRvbSgpLnRvU3RyaW5nKCkuc3Vic3RyaW5nKDIsIDgpOyAvLyBBIHNpbXVsYXRlZCBpZFxuICAgICAgICBjb25zdCBvcmlnT25DbG9zZSA9IHRoaXMub25jbG9zZTtcbiAgICAgICAgLy8gVHJhY2sgZGVsYXkgaW4gYWN0dWFsIGNsb3N1cmUgb2YgdGhlIHNvY2tldFxuICAgICAgICB0aGlzLm9uY2xvc2UgPSBjbG9zZUV2ZW50ID0+IHtcbiAgICAgICAgICAgIGNvbnN0IGRlbGF5ID0gbmV3IERhdGUoKS5nZXRUaW1lKCkgLSB0cy5nZXRUaW1lKCk7XG4gICAgICAgICAgICBkZWJ1ZyhgRGlzY2FyZGVkIHNvY2tldCAoIyR7aWR9KSAgY2xvc2VkIGFmdGVyICR7ZGVsYXl9bXMsIHdpdGggY29kZS9yZWFzb246ICR7Y2xvc2VFdmVudC5jb2RlfS8ke2Nsb3NlRXZlbnQucmVhc29ufWApO1xuICAgICAgICB9O1xuICAgICAgICB0aGlzLmNsb3NlKCk7XG4gICAgICAgIG9yaWdPbkNsb3NlPy5jYWxsKHdlYlNvY2tldCwge1xuICAgICAgICAgICAgY29kZTogNDAwMSxcbiAgICAgICAgICAgIHJlYXNvbjogYFF1aWNrIGRpc2NhcmRpbmcgc29ja2V0ICgjJHtpZH0pIHdpdGhvdXQgd2FpdGluZyBmb3IgdGhlIHNodXRkb3duIHNlcXVlbmNlLmAsXG4gICAgICAgICAgICB3YXNDbGVhbjogZmFsc2UsXG4gICAgICAgIH0pO1xuICAgIH07XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1hdWdtZW50LXdlYnNvY2tldC5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@stomp/stompjs/esm6/augment-websocket.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@stomp/stompjs/esm6/byte.js":
/*!**************************************************!*\
  !*** ./node_modules/@stomp/stompjs/esm6/byte.js ***!
  \**************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   BYTE: () => (/* binding */ BYTE)\n/* harmony export */ });\n/**\n * Some byte values, used as per STOMP specifications.\n *\n * Part of `@stomp/stompjs`.\n *\n * @internal\n */\nconst BYTE = {\n    // LINEFEED byte (octet 10)\n    LF: '\\x0A',\n    // NULL byte (octet 0)\n    NULL: '\\x00',\n};\n//# sourceMappingURL=byte.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHN0b21wL3N0b21wanMvZXNtNi9ieXRlLmpzIiwibWFwcGluZ3MiOiI7Ozs7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYXFvby1mZS8uL25vZGVfbW9kdWxlcy9Ac3RvbXAvc3RvbXBqcy9lc202L2J5dGUuanM/ZmVmOSJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIFNvbWUgYnl0ZSB2YWx1ZXMsIHVzZWQgYXMgcGVyIFNUT01QIHNwZWNpZmljYXRpb25zLlxuICpcbiAqIFBhcnQgb2YgYEBzdG9tcC9zdG9tcGpzYC5cbiAqXG4gKiBAaW50ZXJuYWxcbiAqL1xuZXhwb3J0IGNvbnN0IEJZVEUgPSB7XG4gICAgLy8gTElORUZFRUQgYnl0ZSAob2N0ZXQgMTApXG4gICAgTEY6ICdcXHgwQScsXG4gICAgLy8gTlVMTCBieXRlIChvY3RldCAwKVxuICAgIE5VTEw6ICdcXHgwMCcsXG59O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Ynl0ZS5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@stomp/stompjs/esm6/byte.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@stomp/stompjs/esm6/client.js":
/*!****************************************************!*\
  !*** ./node_modules/@stomp/stompjs/esm6/client.js ***!
  \****************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Client: () => (/* binding */ Client)\n/* harmony export */ });\n/* harmony import */ var _stomp_handler_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./stomp-handler.js */ \"(ssr)/./node_modules/@stomp/stompjs/esm6/stomp-handler.js\");\n/* harmony import */ var _types_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./types.js */ \"(ssr)/./node_modules/@stomp/stompjs/esm6/types.js\");\n/* harmony import */ var _versions_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./versions.js */ \"(ssr)/./node_modules/@stomp/stompjs/esm6/versions.js\");\n\n\n\n/**\n * STOMP Client Class.\n *\n * Part of `@stomp/stompjs`.\n */\nclass Client {\n    /**\n     * Create an instance.\n     */\n    constructor(conf = {}) {\n        /**\n         * STOMP versions to attempt during STOMP handshake. By default, versions `1.2`, `1.1`, and `1.0` are attempted.\n         *\n         * Example:\n         * ```javascript\n         *        // Try only versions 1.1 and 1.0\n         *        client.stompVersions = new Versions(['1.1', '1.0'])\n         * ```\n         */\n        this.stompVersions = _versions_js__WEBPACK_IMPORTED_MODULE_0__.Versions.default;\n        /**\n         * Will retry if Stomp connection is not established in specified milliseconds.\n         * Default 0, which switches off automatic reconnection.\n         */\n        this.connectionTimeout = 0;\n        /**\n         *  automatically reconnect with delay in milliseconds, set to 0 to disable.\n         */\n        this.reconnectDelay = 5000;\n        /**\n         * Incoming heartbeat interval in milliseconds. Set to 0 to disable.\n         */\n        this.heartbeatIncoming = 10000;\n        /**\n         * Outgoing heartbeat interval in milliseconds. Set to 0 to disable.\n         */\n        this.heartbeatOutgoing = 10000;\n        /**\n         * This switches on a non-standard behavior while sending WebSocket packets.\n         * It splits larger (text) packets into chunks of [maxWebSocketChunkSize]{@link Client#maxWebSocketChunkSize}.\n         * Only Java Spring brokers seem to support this mode.\n         *\n         * WebSockets, by itself, split large (text) packets,\n         * so it is not needed with a truly compliant STOMP/WebSocket broker.\n         * Setting it for such a broker will cause large messages to fail.\n         *\n         * `false` by default.\n         *\n         * Binary frames are never split.\n         */\n        this.splitLargeFrames = false;\n        /**\n         * See [splitLargeFrames]{@link Client#splitLargeFrames}.\n         * This has no effect if [splitLargeFrames]{@link Client#splitLargeFrames} is `false`.\n         */\n        this.maxWebSocketChunkSize = 8 * 1024;\n        /**\n         * Usually the\n         * [type of WebSocket frame]{@link https://developer.mozilla.org/en-US/docs/Web/API/WebSocket/send#Parameters}\n         * is automatically decided by type of the payload.\n         * Default is `false`, which should work with all compliant brokers.\n         *\n         * Set this flag to force binary frames.\n         */\n        this.forceBinaryWSFrames = false;\n        /**\n         * A bug in ReactNative chops a string on occurrence of a NULL.\n         * See issue [https://github.com/stomp-js/stompjs/issues/89]{@link https://github.com/stomp-js/stompjs/issues/89}.\n         * This makes incoming WebSocket messages invalid STOMP packets.\n         * Setting this flag attempts to reverse the damage by appending a NULL.\n         * If the broker splits a large message into multiple WebSocket messages,\n         * this flag will cause data loss and abnormal termination of connection.\n         *\n         * This is not an ideal solution, but a stop gap until the underlying issue is fixed at ReactNative library.\n         */\n        this.appendMissingNULLonIncoming = false;\n        /**\n         * Browsers do not immediately close WebSockets when `.close` is issued.\n         * This may cause reconnection to take a significantly long time in case\n         *  of some types of failures.\n         * In case of incoming heartbeat failure, this experimental flag instructs\n         * the library to discard the socket immediately\n         * (even before it is actually closed).\n         */\n        this.discardWebsocketOnCommFailure = false;\n        /**\n         * Activation state.\n         *\n         * It will usually be ACTIVE or INACTIVE.\n         * When deactivating, it may go from ACTIVE to INACTIVE without entering DEACTIVATING.\n         */\n        this.state = _types_js__WEBPACK_IMPORTED_MODULE_1__.ActivationState.INACTIVE;\n        // No op callbacks\n        const noOp = () => { };\n        this.debug = noOp;\n        this.beforeConnect = noOp;\n        this.onConnect = noOp;\n        this.onDisconnect = noOp;\n        this.onUnhandledMessage = noOp;\n        this.onUnhandledReceipt = noOp;\n        this.onUnhandledFrame = noOp;\n        this.onStompError = noOp;\n        this.onWebSocketClose = noOp;\n        this.onWebSocketError = noOp;\n        this.logRawCommunication = false;\n        this.onChangeState = noOp;\n        // These parameters would typically get proper values before connect is called\n        this.connectHeaders = {};\n        this._disconnectHeaders = {};\n        // Apply configuration\n        this.configure(conf);\n    }\n    /**\n     * Underlying WebSocket instance, READONLY.\n     */\n    get webSocket() {\n        return this._stompHandler?._webSocket;\n    }\n    /**\n     * Disconnection headers.\n     */\n    get disconnectHeaders() {\n        return this._disconnectHeaders;\n    }\n    set disconnectHeaders(value) {\n        this._disconnectHeaders = value;\n        if (this._stompHandler) {\n            this._stompHandler.disconnectHeaders = this._disconnectHeaders;\n        }\n    }\n    /**\n     * `true` if there is an active connection to STOMP Broker\n     */\n    get connected() {\n        return !!this._stompHandler && this._stompHandler.connected;\n    }\n    /**\n     * version of STOMP protocol negotiated with the server, READONLY\n     */\n    get connectedVersion() {\n        return this._stompHandler ? this._stompHandler.connectedVersion : undefined;\n    }\n    /**\n     * if the client is active (connected or going to reconnect)\n     */\n    get active() {\n        return this.state === _types_js__WEBPACK_IMPORTED_MODULE_1__.ActivationState.ACTIVE;\n    }\n    _changeState(state) {\n        this.state = state;\n        this.onChangeState(state);\n    }\n    /**\n     * Update configuration.\n     */\n    configure(conf) {\n        // bulk assign all properties to this\n        Object.assign(this, conf);\n    }\n    /**\n     * Initiate the connection with the broker.\n     * If the connection breaks, as per [Client#reconnectDelay]{@link Client#reconnectDelay},\n     * it will keep trying to reconnect.\n     *\n     * Call [Client#deactivate]{@link Client#deactivate} to disconnect and stop reconnection attempts.\n     */\n    activate() {\n        const _activate = () => {\n            if (this.active) {\n                this.debug('Already ACTIVE, ignoring request to activate');\n                return;\n            }\n            this._changeState(_types_js__WEBPACK_IMPORTED_MODULE_1__.ActivationState.ACTIVE);\n            this._connect();\n        };\n        // if it is deactivating, wait for it to complete before activating.\n        if (this.state === _types_js__WEBPACK_IMPORTED_MODULE_1__.ActivationState.DEACTIVATING) {\n            this.debug('Waiting for deactivation to finish before activating');\n            this.deactivate().then(() => {\n                _activate();\n            });\n        }\n        else {\n            _activate();\n        }\n    }\n    async _connect() {\n        await this.beforeConnect();\n        if (this._stompHandler) {\n            this.debug('There is already a stompHandler, skipping the call to connect');\n            return;\n        }\n        if (!this.active) {\n            this.debug('Client has been marked inactive, will not attempt to connect');\n            return;\n        }\n        // setup connection watcher\n        if (this.connectionTimeout > 0) {\n            // clear first\n            if (this._connectionWatcher) {\n                clearTimeout(this._connectionWatcher);\n            }\n            this._connectionWatcher = setTimeout(() => {\n                if (this.connected) {\n                    return;\n                }\n                // Connection not established, close the underlying socket\n                // a reconnection will be attempted\n                this.debug(`Connection not established in ${this.connectionTimeout}ms, closing socket`);\n                this.forceDisconnect();\n            }, this.connectionTimeout);\n        }\n        this.debug('Opening Web Socket...');\n        // Get the actual WebSocket (or a similar object)\n        const webSocket = this._createWebSocket();\n        this._stompHandler = new _stomp_handler_js__WEBPACK_IMPORTED_MODULE_2__.StompHandler(this, webSocket, {\n            debug: this.debug,\n            stompVersions: this.stompVersions,\n            connectHeaders: this.connectHeaders,\n            disconnectHeaders: this._disconnectHeaders,\n            heartbeatIncoming: this.heartbeatIncoming,\n            heartbeatOutgoing: this.heartbeatOutgoing,\n            splitLargeFrames: this.splitLargeFrames,\n            maxWebSocketChunkSize: this.maxWebSocketChunkSize,\n            forceBinaryWSFrames: this.forceBinaryWSFrames,\n            logRawCommunication: this.logRawCommunication,\n            appendMissingNULLonIncoming: this.appendMissingNULLonIncoming,\n            discardWebsocketOnCommFailure: this.discardWebsocketOnCommFailure,\n            onConnect: frame => {\n                // Successfully connected, stop the connection watcher\n                if (this._connectionWatcher) {\n                    clearTimeout(this._connectionWatcher);\n                    this._connectionWatcher = undefined;\n                }\n                if (!this.active) {\n                    this.debug('STOMP got connected while deactivate was issued, will disconnect now');\n                    this._disposeStompHandler();\n                    return;\n                }\n                this.onConnect(frame);\n            },\n            onDisconnect: frame => {\n                this.onDisconnect(frame);\n            },\n            onStompError: frame => {\n                this.onStompError(frame);\n            },\n            onWebSocketClose: evt => {\n                this._stompHandler = undefined; // a new one will be created in case of a reconnect\n                if (this.state === _types_js__WEBPACK_IMPORTED_MODULE_1__.ActivationState.DEACTIVATING) {\n                    // Mark deactivation complete\n                    this._changeState(_types_js__WEBPACK_IMPORTED_MODULE_1__.ActivationState.INACTIVE);\n                }\n                // The callback is called before attempting to reconnect, this would allow the client\n                // to be `deactivated` in the callback.\n                this.onWebSocketClose(evt);\n                if (this.active) {\n                    this._schedule_reconnect();\n                }\n            },\n            onWebSocketError: evt => {\n                this.onWebSocketError(evt);\n            },\n            onUnhandledMessage: message => {\n                this.onUnhandledMessage(message);\n            },\n            onUnhandledReceipt: frame => {\n                this.onUnhandledReceipt(frame);\n            },\n            onUnhandledFrame: frame => {\n                this.onUnhandledFrame(frame);\n            },\n        });\n        this._stompHandler.start();\n    }\n    _createWebSocket() {\n        let webSocket;\n        if (this.webSocketFactory) {\n            webSocket = this.webSocketFactory();\n        }\n        else if (this.brokerURL) {\n            webSocket = new WebSocket(this.brokerURL, this.stompVersions.protocolVersions());\n        }\n        else {\n            throw new Error('Either brokerURL or webSocketFactory must be provided');\n        }\n        webSocket.binaryType = 'arraybuffer';\n        return webSocket;\n    }\n    _schedule_reconnect() {\n        if (this.reconnectDelay > 0) {\n            this.debug(`STOMP: scheduling reconnection in ${this.reconnectDelay}ms`);\n            this._reconnector = setTimeout(() => {\n                this._connect();\n            }, this.reconnectDelay);\n        }\n    }\n    /**\n     * Disconnect if connected and stop auto reconnect loop.\n     * Appropriate callbacks will be invoked if there is an underlying STOMP connection.\n     *\n     * This call is async. It will resolve immediately if there is no underlying active websocket,\n     * otherwise, it will resolve after the underlying websocket is properly disposed of.\n     *\n     * It is not an error to invoke this method more than once.\n     * Each of those would resolve on completion of deactivation.\n     *\n     * To reactivate, you can call [Client#activate]{@link Client#activate}.\n     *\n     * Experimental: pass `force: true` to immediately discard the underlying connection.\n     * This mode will skip both the STOMP and the Websocket shutdown sequences.\n     * In some cases, browsers take a long time in the Websocket shutdown\n     * if the underlying connection had gone stale.\n     * Using this mode can speed up.\n     * When this mode is used, the actual Websocket may linger for a while\n     * and the broker may not realize that the connection is no longer in use.\n     *\n     * It is possible to invoke this method initially without the `force` option\n     * and subsequently, say after a wait, with the `force` option.\n     */\n    async deactivate(options = {}) {\n        const force = options.force || false;\n        const needToDispose = this.active;\n        let retPromise;\n        if (this.state === _types_js__WEBPACK_IMPORTED_MODULE_1__.ActivationState.INACTIVE) {\n            this.debug(`Already INACTIVE, nothing more to do`);\n            return Promise.resolve();\n        }\n        this._changeState(_types_js__WEBPACK_IMPORTED_MODULE_1__.ActivationState.DEACTIVATING);\n        // Clear if a reconnection was scheduled\n        if (this._reconnector) {\n            clearTimeout(this._reconnector);\n            this._reconnector = undefined;\n        }\n        if (this._stompHandler &&\n            // @ts-ignore - if there is a _stompHandler, there is the webSocket\n            this.webSocket.readyState !== _types_js__WEBPACK_IMPORTED_MODULE_1__.StompSocketState.CLOSED) {\n            const origOnWebSocketClose = this._stompHandler.onWebSocketClose;\n            // we need to wait for the underlying websocket to close\n            retPromise = new Promise((resolve, reject) => {\n                // @ts-ignore - there is a _stompHandler\n                this._stompHandler.onWebSocketClose = evt => {\n                    origOnWebSocketClose(evt);\n                    resolve();\n                };\n            });\n        }\n        else {\n            // indicate that auto reconnect loop should terminate\n            this._changeState(_types_js__WEBPACK_IMPORTED_MODULE_1__.ActivationState.INACTIVE);\n            return Promise.resolve();\n        }\n        if (force) {\n            this._stompHandler?.discardWebsocket();\n        }\n        else if (needToDispose) {\n            this._disposeStompHandler();\n        }\n        return retPromise;\n    }\n    /**\n     * Force disconnect if there is an active connection by directly closing the underlying WebSocket.\n     * This is different from a normal disconnect where a DISCONNECT sequence is carried out with the broker.\n     * After forcing disconnect, automatic reconnect will be attempted.\n     * To stop further reconnects call [Client#deactivate]{@link Client#deactivate} as well.\n     */\n    forceDisconnect() {\n        if (this._stompHandler) {\n            this._stompHandler.forceDisconnect();\n        }\n    }\n    _disposeStompHandler() {\n        // Dispose STOMP Handler\n        if (this._stompHandler) {\n            this._stompHandler.dispose();\n        }\n    }\n    /**\n     * Send a message to a named destination. Refer to your STOMP broker documentation for types\n     * and naming of destinations.\n     *\n     * STOMP protocol specifies and suggests some headers and also allows broker-specific headers.\n     *\n     * `body` must be String.\n     * You will need to covert the payload to string in case it is not string (e.g. JSON).\n     *\n     * To send a binary message body, use `binaryBody` parameter. It should be a\n     * [Uint8Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array).\n     * Sometimes brokers may not support binary frames out of the box.\n     * Please check your broker documentation.\n     *\n     * `content-length` header is automatically added to the STOMP Frame sent to the broker.\n     * Set `skipContentLengthHeader` to indicate that `content-length` header should not be added.\n     * For binary messages, `content-length` header is always added.\n     *\n     * Caution: The broker will, most likely, report an error and disconnect\n     * if the message body has NULL octet(s) and `content-length` header is missing.\n     *\n     * ```javascript\n     *        client.publish({destination: \"/queue/test\", headers: {priority: 9}, body: \"Hello, STOMP\"});\n     *\n     *        // Only destination is mandatory parameter\n     *        client.publish({destination: \"/queue/test\", body: \"Hello, STOMP\"});\n     *\n     *        // Skip content-length header in the frame to the broker\n     *        client.publish({\"/queue/test\", body: \"Hello, STOMP\", skipContentLengthHeader: true});\n     *\n     *        var binaryData = generateBinaryData(); // This need to be of type Uint8Array\n     *        // setting content-type header is not mandatory, however a good practice\n     *        client.publish({destination: '/topic/special', binaryBody: binaryData,\n     *                         headers: {'content-type': 'application/octet-stream'}});\n     * ```\n     */\n    publish(params) {\n        this._checkConnection();\n        // @ts-ignore - we already checked that there is a _stompHandler, and it is connected\n        this._stompHandler.publish(params);\n    }\n    _checkConnection() {\n        if (!this.connected) {\n            throw new TypeError('There is no underlying STOMP connection');\n        }\n    }\n    /**\n     * STOMP brokers may carry out operation asynchronously and allow requesting for acknowledgement.\n     * To request an acknowledgement, a `receipt` header needs to be sent with the actual request.\n     * The value (say receipt-id) for this header needs to be unique for each use.\n     * Typically, a sequence, a UUID, a random number or a combination may be used.\n     *\n     * A complaint broker will send a RECEIPT frame when an operation has actually been completed.\n     * The operation needs to be matched based on the value of the receipt-id.\n     *\n     * This method allows watching for a receipt and invoking the callback\n     *  when the corresponding receipt has been received.\n     *\n     * The actual {@link IFrame} will be passed as parameter to the callback.\n     *\n     * Example:\n     * ```javascript\n     *        // Subscribing with acknowledgement\n     *        let receiptId = randomText();\n     *\n     *        client.watchForReceipt(receiptId, function() {\n     *          // Will be called after server acknowledges\n     *        });\n     *\n     *        client.subscribe(TEST.destination, onMessage, {receipt: receiptId});\n     *\n     *\n     *        // Publishing with acknowledgement\n     *        receiptId = randomText();\n     *\n     *        client.watchForReceipt(receiptId, function() {\n     *          // Will be called after server acknowledges\n     *        });\n     *        client.publish({destination: TEST.destination, headers: {receipt: receiptId}, body: msg});\n     * ```\n     */\n    watchForReceipt(receiptId, callback) {\n        this._checkConnection();\n        // @ts-ignore - we already checked that there is a _stompHandler, and it is connected\n        this._stompHandler.watchForReceipt(receiptId, callback);\n    }\n    /**\n     * Subscribe to a STOMP Broker location. The callback will be invoked for each\n     * received message with the {@link IMessage} as argument.\n     *\n     * Note: The library will generate a unique ID if there is none provided in the headers.\n     *       To use your own ID, pass it using the `headers` argument.\n     *\n     * ```javascript\n     *        callback = function(message) {\n     *        // called when the client receives a STOMP message from the server\n     *          if (message.body) {\n     *            alert(\"got message with body \" + message.body)\n     *          } else {\n     *            alert(\"got empty message\");\n     *          }\n     *        });\n     *\n     *        var subscription = client.subscribe(\"/queue/test\", callback);\n     *\n     *        // Explicit subscription id\n     *        var mySubId = 'my-subscription-id-001';\n     *        var subscription = client.subscribe(destination, callback, { id: mySubId });\n     * ```\n     */\n    subscribe(destination, callback, headers = {}) {\n        this._checkConnection();\n        // @ts-ignore - we already checked that there is a _stompHandler, and it is connected\n        return this._stompHandler.subscribe(destination, callback, headers);\n    }\n    /**\n     * It is preferable to unsubscribe from a subscription by calling\n     * `unsubscribe()` directly on {@link StompSubscription} returned by `client.subscribe()`:\n     *\n     * ```javascript\n     *        var subscription = client.subscribe(destination, onmessage);\n     *        // ...\n     *        subscription.unsubscribe();\n     * ```\n     *\n     * See: https://stomp.github.com/stomp-specification-1.2.html#UNSUBSCRIBE UNSUBSCRIBE Frame\n     */\n    unsubscribe(id, headers = {}) {\n        this._checkConnection();\n        // @ts-ignore - we already checked that there is a _stompHandler, and it is connected\n        this._stompHandler.unsubscribe(id, headers);\n    }\n    /**\n     * Start a transaction, the returned {@link ITransaction} has methods - [commit]{@link ITransaction#commit}\n     * and [abort]{@link ITransaction#abort}.\n     *\n     * `transactionId` is optional, if not passed the library will generate it internally.\n     */\n    begin(transactionId) {\n        this._checkConnection();\n        // @ts-ignore - we already checked that there is a _stompHandler, and it is connected\n        return this._stompHandler.begin(transactionId);\n    }\n    /**\n     * Commit a transaction.\n     *\n     * It is preferable to commit a transaction by calling [commit]{@link ITransaction#commit} directly on\n     * {@link ITransaction} returned by [client.begin]{@link Client#begin}.\n     *\n     * ```javascript\n     *        var tx = client.begin(txId);\n     *        //...\n     *        tx.commit();\n     * ```\n     */\n    commit(transactionId) {\n        this._checkConnection();\n        // @ts-ignore - we already checked that there is a _stompHandler, and it is connected\n        this._stompHandler.commit(transactionId);\n    }\n    /**\n     * Abort a transaction.\n     * It is preferable to abort a transaction by calling [abort]{@link ITransaction#abort} directly on\n     * {@link ITransaction} returned by [client.begin]{@link Client#begin}.\n     *\n     * ```javascript\n     *        var tx = client.begin(txId);\n     *        //...\n     *        tx.abort();\n     * ```\n     */\n    abort(transactionId) {\n        this._checkConnection();\n        // @ts-ignore - we already checked that there is a _stompHandler, and it is connected\n        this._stompHandler.abort(transactionId);\n    }\n    /**\n     * ACK a message. It is preferable to acknowledge a message by calling [ack]{@link IMessage#ack} directly\n     * on the {@link IMessage} handled by a subscription callback:\n     *\n     * ```javascript\n     *        var callback = function (message) {\n     *          // process the message\n     *          // acknowledge it\n     *          message.ack();\n     *        };\n     *        client.subscribe(destination, callback, {'ack': 'client'});\n     * ```\n     */\n    ack(messageId, subscriptionId, headers = {}) {\n        this._checkConnection();\n        // @ts-ignore - we already checked that there is a _stompHandler, and it is connected\n        this._stompHandler.ack(messageId, subscriptionId, headers);\n    }\n    /**\n     * NACK a message. It is preferable to acknowledge a message by calling [nack]{@link IMessage#nack} directly\n     * on the {@link IMessage} handled by a subscription callback:\n     *\n     * ```javascript\n     *        var callback = function (message) {\n     *          // process the message\n     *          // an error occurs, nack it\n     *          message.nack();\n     *        };\n     *        client.subscribe(destination, callback, {'ack': 'client'});\n     * ```\n     */\n    nack(messageId, subscriptionId, headers = {}) {\n        this._checkConnection();\n        // @ts-ignore - we already checked that there is a _stompHandler, and it is connected\n        this._stompHandler.nack(messageId, subscriptionId, headers);\n    }\n}\n//# sourceMappingURL=client.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@stomp/stompjs/esm6/client.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@stomp/stompjs/esm6/frame-impl.js":
/*!********************************************************!*\
  !*** ./node_modules/@stomp/stompjs/esm6/frame-impl.js ***!
  \********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   FrameImpl: () => (/* binding */ FrameImpl)\n/* harmony export */ });\n/* harmony import */ var _byte_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./byte.js */ \"(ssr)/./node_modules/@stomp/stompjs/esm6/byte.js\");\n\n/**\n * Frame class represents a STOMP frame.\n *\n * @internal\n */\nclass FrameImpl {\n    /**\n     * Frame constructor. `command`, `headers` and `body` are available as properties.\n     *\n     * @internal\n     */\n    constructor(params) {\n        const { command, headers, body, binaryBody, escapeHeaderValues, skipContentLengthHeader, } = params;\n        this.command = command;\n        this.headers = Object.assign({}, headers || {});\n        if (binaryBody) {\n            this._binaryBody = binaryBody;\n            this.isBinaryBody = true;\n        }\n        else {\n            this._body = body || '';\n            this.isBinaryBody = false;\n        }\n        this.escapeHeaderValues = escapeHeaderValues || false;\n        this.skipContentLengthHeader = skipContentLengthHeader || false;\n    }\n    /**\n     * body of the frame\n     */\n    get body() {\n        if (!this._body && this.isBinaryBody) {\n            this._body = new TextDecoder().decode(this._binaryBody);\n        }\n        return this._body || '';\n    }\n    /**\n     * body as Uint8Array\n     */\n    get binaryBody() {\n        if (!this._binaryBody && !this.isBinaryBody) {\n            this._binaryBody = new TextEncoder().encode(this._body);\n        }\n        // At this stage it will definitely have a valid value\n        return this._binaryBody;\n    }\n    /**\n     * deserialize a STOMP Frame from raw data.\n     *\n     * @internal\n     */\n    static fromRawFrame(rawFrame, escapeHeaderValues) {\n        const headers = {};\n        const trim = (str) => str.replace(/^\\s+|\\s+$/g, '');\n        // In case of repeated headers, as per standards, first value need to be used\n        for (const header of rawFrame.headers.reverse()) {\n            const idx = header.indexOf(':');\n            const key = trim(header[0]);\n            let value = trim(header[1]);\n            if (escapeHeaderValues &&\n                rawFrame.command !== 'CONNECT' &&\n                rawFrame.command !== 'CONNECTED') {\n                value = FrameImpl.hdrValueUnEscape(value);\n            }\n            headers[key] = value;\n        }\n        return new FrameImpl({\n            command: rawFrame.command,\n            headers,\n            binaryBody: rawFrame.binaryBody,\n            escapeHeaderValues,\n        });\n    }\n    /**\n     * @internal\n     */\n    toString() {\n        return this.serializeCmdAndHeaders();\n    }\n    /**\n     * serialize this Frame in a format suitable to be passed to WebSocket.\n     * If the body is string the output will be string.\n     * If the body is binary (i.e. of type Unit8Array) it will be serialized to ArrayBuffer.\n     *\n     * @internal\n     */\n    serialize() {\n        const cmdAndHeaders = this.serializeCmdAndHeaders();\n        if (this.isBinaryBody) {\n            return FrameImpl.toUnit8Array(cmdAndHeaders, this._binaryBody).buffer;\n        }\n        else {\n            return cmdAndHeaders + this._body + _byte_js__WEBPACK_IMPORTED_MODULE_0__.BYTE.NULL;\n        }\n    }\n    serializeCmdAndHeaders() {\n        const lines = [this.command];\n        if (this.skipContentLengthHeader) {\n            delete this.headers['content-length'];\n        }\n        for (const name of Object.keys(this.headers || {})) {\n            const value = this.headers[name];\n            if (this.escapeHeaderValues &&\n                this.command !== 'CONNECT' &&\n                this.command !== 'CONNECTED') {\n                lines.push(`${name}:${FrameImpl.hdrValueEscape(`${value}`)}`);\n            }\n            else {\n                lines.push(`${name}:${value}`);\n            }\n        }\n        if (this.isBinaryBody ||\n            (!this.isBodyEmpty() && !this.skipContentLengthHeader)) {\n            lines.push(`content-length:${this.bodyLength()}`);\n        }\n        return lines.join(_byte_js__WEBPACK_IMPORTED_MODULE_0__.BYTE.LF) + _byte_js__WEBPACK_IMPORTED_MODULE_0__.BYTE.LF + _byte_js__WEBPACK_IMPORTED_MODULE_0__.BYTE.LF;\n    }\n    isBodyEmpty() {\n        return this.bodyLength() === 0;\n    }\n    bodyLength() {\n        const binaryBody = this.binaryBody;\n        return binaryBody ? binaryBody.length : 0;\n    }\n    /**\n     * Compute the size of a UTF-8 string by counting its number of bytes\n     * (and not the number of characters composing the string)\n     */\n    static sizeOfUTF8(s) {\n        return s ? new TextEncoder().encode(s).length : 0;\n    }\n    static toUnit8Array(cmdAndHeaders, binaryBody) {\n        const uint8CmdAndHeaders = new TextEncoder().encode(cmdAndHeaders);\n        const nullTerminator = new Uint8Array([0]);\n        const uint8Frame = new Uint8Array(uint8CmdAndHeaders.length + binaryBody.length + nullTerminator.length);\n        uint8Frame.set(uint8CmdAndHeaders);\n        uint8Frame.set(binaryBody, uint8CmdAndHeaders.length);\n        uint8Frame.set(nullTerminator, uint8CmdAndHeaders.length + binaryBody.length);\n        return uint8Frame;\n    }\n    /**\n     * Serialize a STOMP frame as per STOMP standards, suitable to be sent to the STOMP broker.\n     *\n     * @internal\n     */\n    static marshall(params) {\n        const frame = new FrameImpl(params);\n        return frame.serialize();\n    }\n    /**\n     *  Escape header values\n     */\n    static hdrValueEscape(str) {\n        return str\n            .replace(/\\\\/g, '\\\\\\\\')\n            .replace(/\\r/g, '\\\\r')\n            .replace(/\\n/g, '\\\\n')\n            .replace(/:/g, '\\\\c');\n    }\n    /**\n     * UnEscape header values\n     */\n    static hdrValueUnEscape(str) {\n        return str\n            .replace(/\\\\r/g, '\\r')\n            .replace(/\\\\n/g, '\\n')\n            .replace(/\\\\c/g, ':')\n            .replace(/\\\\\\\\/g, '\\\\');\n    }\n}\n//# sourceMappingURL=frame-impl.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@stomp/stompjs/esm6/frame-impl.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@stomp/stompjs/esm6/parser.js":
/*!****************************************************!*\
  !*** ./node_modules/@stomp/stompjs/esm6/parser.js ***!
  \****************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Parser: () => (/* binding */ Parser)\n/* harmony export */ });\n/**\n * @internal\n */\nconst NULL = 0;\n/**\n * @internal\n */\nconst LF = 10;\n/**\n * @internal\n */\nconst CR = 13;\n/**\n * @internal\n */\nconst COLON = 58;\n/**\n * This is an evented, rec descent parser.\n * A stream of Octets can be passed and whenever it recognizes\n * a complete Frame or an incoming ping it will invoke the registered callbacks.\n *\n * All incoming Octets are fed into _onByte function.\n * Depending on current state the _onByte function keeps changing.\n * Depending on the state it keeps accumulating into _token and _results.\n * State is indicated by current value of _onByte, all states are named as _collect.\n *\n * STOMP standards https://stomp.github.io/stomp-specification-1.2.html\n * imply that all lengths are considered in bytes (instead of string lengths).\n * So, before actual parsing, if the incoming data is String it is converted to Octets.\n * This allows faithful implementation of the protocol and allows NULL Octets to be present in the body.\n *\n * There is no peek function on the incoming data.\n * When a state change occurs based on an Octet without consuming the Octet,\n * the Octet, after state change, is fed again (_reinjectByte).\n * This became possible as the state change can be determined by inspecting just one Octet.\n *\n * There are two modes to collect the body, if content-length header is there then it by counting Octets\n * otherwise it is determined by NULL terminator.\n *\n * Following the standards, the command and headers are converted to Strings\n * and the body is returned as Octets.\n * Headers are returned as an array and not as Hash - to allow multiple occurrence of an header.\n *\n * This parser does not use Regular Expressions as that can only operate on Strings.\n *\n * It handles if multiple STOMP frames are given as one chunk, a frame is split into multiple chunks, or\n * any combination there of. The parser remembers its state (any partial frame) and continues when a new chunk\n * is pushed.\n *\n * Typically the higher level function will convert headers to Hash, handle unescaping of header values\n * (which is protocol version specific), and convert body to text.\n *\n * Check the parser.spec.js to understand cases that this parser is supposed to handle.\n *\n * Part of `@stomp/stompjs`.\n *\n * @internal\n */\nclass Parser {\n    constructor(onFrame, onIncomingPing) {\n        this.onFrame = onFrame;\n        this.onIncomingPing = onIncomingPing;\n        this._encoder = new TextEncoder();\n        this._decoder = new TextDecoder();\n        this._token = [];\n        this._initState();\n    }\n    parseChunk(segment, appendMissingNULLonIncoming = false) {\n        let chunk;\n        if (typeof segment === 'string') {\n            chunk = this._encoder.encode(segment);\n        }\n        else {\n            chunk = new Uint8Array(segment);\n        }\n        // See https://github.com/stomp-js/stompjs/issues/89\n        // Remove when underlying issue is fixed.\n        //\n        // Send a NULL byte, if the last byte of a Text frame was not NULL.F\n        if (appendMissingNULLonIncoming && chunk[chunk.length - 1] !== 0) {\n            const chunkWithNull = new Uint8Array(chunk.length + 1);\n            chunkWithNull.set(chunk, 0);\n            chunkWithNull[chunk.length] = 0;\n            chunk = chunkWithNull;\n        }\n        // tslint:disable-next-line:prefer-for-of\n        for (let i = 0; i < chunk.length; i++) {\n            const byte = chunk[i];\n            this._onByte(byte);\n        }\n    }\n    // The following implements a simple Rec Descent Parser.\n    // The grammar is simple and just one byte tells what should be the next state\n    _collectFrame(byte) {\n        if (byte === NULL) {\n            // Ignore\n            return;\n        }\n        if (byte === CR) {\n            // Ignore CR\n            return;\n        }\n        if (byte === LF) {\n            // Incoming Ping\n            this.onIncomingPing();\n            return;\n        }\n        this._onByte = this._collectCommand;\n        this._reinjectByte(byte);\n    }\n    _collectCommand(byte) {\n        if (byte === CR) {\n            // Ignore CR\n            return;\n        }\n        if (byte === LF) {\n            this._results.command = this._consumeTokenAsUTF8();\n            this._onByte = this._collectHeaders;\n            return;\n        }\n        this._consumeByte(byte);\n    }\n    _collectHeaders(byte) {\n        if (byte === CR) {\n            // Ignore CR\n            return;\n        }\n        if (byte === LF) {\n            this._setupCollectBody();\n            return;\n        }\n        this._onByte = this._collectHeaderKey;\n        this._reinjectByte(byte);\n    }\n    _reinjectByte(byte) {\n        this._onByte(byte);\n    }\n    _collectHeaderKey(byte) {\n        if (byte === COLON) {\n            this._headerKey = this._consumeTokenAsUTF8();\n            this._onByte = this._collectHeaderValue;\n            return;\n        }\n        this._consumeByte(byte);\n    }\n    _collectHeaderValue(byte) {\n        if (byte === CR) {\n            // Ignore CR\n            return;\n        }\n        if (byte === LF) {\n            this._results.headers.push([\n                this._headerKey,\n                this._consumeTokenAsUTF8(),\n            ]);\n            this._headerKey = undefined;\n            this._onByte = this._collectHeaders;\n            return;\n        }\n        this._consumeByte(byte);\n    }\n    _setupCollectBody() {\n        const contentLengthHeader = this._results.headers.filter((header) => {\n            return header[0] === 'content-length';\n        })[0];\n        if (contentLengthHeader) {\n            this._bodyBytesRemaining = parseInt(contentLengthHeader[1], 10);\n            this._onByte = this._collectBodyFixedSize;\n        }\n        else {\n            this._onByte = this._collectBodyNullTerminated;\n        }\n    }\n    _collectBodyNullTerminated(byte) {\n        if (byte === NULL) {\n            this._retrievedBody();\n            return;\n        }\n        this._consumeByte(byte);\n    }\n    _collectBodyFixedSize(byte) {\n        // It is post decrement, so that we discard the trailing NULL octet\n        if (this._bodyBytesRemaining-- === 0) {\n            this._retrievedBody();\n            return;\n        }\n        this._consumeByte(byte);\n    }\n    _retrievedBody() {\n        this._results.binaryBody = this._consumeTokenAsRaw();\n        try {\n            this.onFrame(this._results);\n        }\n        catch (e) {\n            console.log(`Ignoring an exception thrown by a frame handler. Original exception: `, e);\n        }\n        this._initState();\n    }\n    // Rec Descent Parser helpers\n    _consumeByte(byte) {\n        this._token.push(byte);\n    }\n    _consumeTokenAsUTF8() {\n        return this._decoder.decode(this._consumeTokenAsRaw());\n    }\n    _consumeTokenAsRaw() {\n        const rawResult = new Uint8Array(this._token);\n        this._token = [];\n        return rawResult;\n    }\n    _initState() {\n        this._results = {\n            command: undefined,\n            headers: [],\n            binaryBody: undefined,\n        };\n        this._token = [];\n        this._headerKey = undefined;\n        this._onByte = this._collectFrame;\n    }\n}\n//# sourceMappingURL=parser.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@stomp/stompjs/esm6/parser.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@stomp/stompjs/esm6/stomp-handler.js":
/*!***********************************************************!*\
  !*** ./node_modules/@stomp/stompjs/esm6/stomp-handler.js ***!
  \***********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   StompHandler: () => (/* binding */ StompHandler)\n/* harmony export */ });\n/* harmony import */ var _byte_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./byte.js */ \"(ssr)/./node_modules/@stomp/stompjs/esm6/byte.js\");\n/* harmony import */ var _frame_impl_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./frame-impl.js */ \"(ssr)/./node_modules/@stomp/stompjs/esm6/frame-impl.js\");\n/* harmony import */ var _parser_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./parser.js */ \"(ssr)/./node_modules/@stomp/stompjs/esm6/parser.js\");\n/* harmony import */ var _types_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./types.js */ \"(ssr)/./node_modules/@stomp/stompjs/esm6/types.js\");\n/* harmony import */ var _versions_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./versions.js */ \"(ssr)/./node_modules/@stomp/stompjs/esm6/versions.js\");\n/* harmony import */ var _augment_websocket_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./augment-websocket.js */ \"(ssr)/./node_modules/@stomp/stompjs/esm6/augment-websocket.js\");\n\n\n\n\n\n\n/**\n * The STOMP protocol handler\n *\n * Part of `@stomp/stompjs`.\n *\n * @internal\n */\nclass StompHandler {\n    constructor(_client, _webSocket, config) {\n        this._client = _client;\n        this._webSocket = _webSocket;\n        this._connected = false;\n        this._serverFrameHandlers = {\n            // [CONNECTED Frame](https://stomp.github.com/stomp-specification-1.2.html#CONNECTED_Frame)\n            CONNECTED: frame => {\n                this.debug(`connected to server ${frame.headers.server}`);\n                this._connected = true;\n                this._connectedVersion = frame.headers.version;\n                // STOMP version 1.2 needs header values to be escaped\n                if (this._connectedVersion === _versions_js__WEBPACK_IMPORTED_MODULE_0__.Versions.V1_2) {\n                    this._escapeHeaderValues = true;\n                }\n                this._setupHeartbeat(frame.headers);\n                this.onConnect(frame);\n            },\n            // [MESSAGE Frame](https://stomp.github.com/stomp-specification-1.2.html#MESSAGE)\n            MESSAGE: frame => {\n                // the callback is registered when the client calls\n                // `subscribe()`.\n                // If there is no registered subscription for the received message,\n                // the default `onUnhandledMessage` callback is used that the client can set.\n                // This is useful for subscriptions that are automatically created\n                // on the browser side (e.g. [RabbitMQ's temporary\n                // queues](https://www.rabbitmq.com/stomp.html)).\n                const subscription = frame.headers.subscription;\n                const onReceive = this._subscriptions[subscription] || this.onUnhandledMessage;\n                // bless the frame to be a Message\n                const message = frame;\n                const client = this;\n                const messageId = this._connectedVersion === _versions_js__WEBPACK_IMPORTED_MODULE_0__.Versions.V1_2\n                    ? message.headers.ack\n                    : message.headers['message-id'];\n                // add `ack()` and `nack()` methods directly to the returned frame\n                // so that a simple call to `message.ack()` can acknowledge the message.\n                message.ack = (headers = {}) => {\n                    return client.ack(messageId, subscription, headers);\n                };\n                message.nack = (headers = {}) => {\n                    return client.nack(messageId, subscription, headers);\n                };\n                onReceive(message);\n            },\n            // [RECEIPT Frame](https://stomp.github.com/stomp-specification-1.2.html#RECEIPT)\n            RECEIPT: frame => {\n                const callback = this._receiptWatchers[frame.headers['receipt-id']];\n                if (callback) {\n                    callback(frame);\n                    // Server will acknowledge only once, remove the callback\n                    delete this._receiptWatchers[frame.headers['receipt-id']];\n                }\n                else {\n                    this.onUnhandledReceipt(frame);\n                }\n            },\n            // [ERROR Frame](https://stomp.github.com/stomp-specification-1.2.html#ERROR)\n            ERROR: frame => {\n                this.onStompError(frame);\n            },\n        };\n        // used to index subscribers\n        this._counter = 0;\n        // subscription callbacks indexed by subscriber's ID\n        this._subscriptions = {};\n        // receipt-watchers indexed by receipts-ids\n        this._receiptWatchers = {};\n        this._partialData = '';\n        this._escapeHeaderValues = false;\n        this._lastServerActivityTS = Date.now();\n        this.debug = config.debug;\n        this.stompVersions = config.stompVersions;\n        this.connectHeaders = config.connectHeaders;\n        this.disconnectHeaders = config.disconnectHeaders;\n        this.heartbeatIncoming = config.heartbeatIncoming;\n        this.heartbeatOutgoing = config.heartbeatOutgoing;\n        this.splitLargeFrames = config.splitLargeFrames;\n        this.maxWebSocketChunkSize = config.maxWebSocketChunkSize;\n        this.forceBinaryWSFrames = config.forceBinaryWSFrames;\n        this.logRawCommunication = config.logRawCommunication;\n        this.appendMissingNULLonIncoming = config.appendMissingNULLonIncoming;\n        this.discardWebsocketOnCommFailure = config.discardWebsocketOnCommFailure;\n        this.onConnect = config.onConnect;\n        this.onDisconnect = config.onDisconnect;\n        this.onStompError = config.onStompError;\n        this.onWebSocketClose = config.onWebSocketClose;\n        this.onWebSocketError = config.onWebSocketError;\n        this.onUnhandledMessage = config.onUnhandledMessage;\n        this.onUnhandledReceipt = config.onUnhandledReceipt;\n        this.onUnhandledFrame = config.onUnhandledFrame;\n    }\n    get connectedVersion() {\n        return this._connectedVersion;\n    }\n    get connected() {\n        return this._connected;\n    }\n    start() {\n        const parser = new _parser_js__WEBPACK_IMPORTED_MODULE_1__.Parser(\n        // On Frame\n        rawFrame => {\n            const frame = _frame_impl_js__WEBPACK_IMPORTED_MODULE_2__.FrameImpl.fromRawFrame(rawFrame, this._escapeHeaderValues);\n            // if this.logRawCommunication is set, the rawChunk is logged at this._webSocket.onmessage\n            if (!this.logRawCommunication) {\n                this.debug(`<<< ${frame}`);\n            }\n            const serverFrameHandler = this._serverFrameHandlers[frame.command] || this.onUnhandledFrame;\n            serverFrameHandler(frame);\n        }, \n        // On Incoming Ping\n        () => {\n            this.debug('<<< PONG');\n        });\n        this._webSocket.onmessage = (evt) => {\n            this.debug('Received data');\n            this._lastServerActivityTS = Date.now();\n            if (this.logRawCommunication) {\n                const rawChunkAsString = evt.data instanceof ArrayBuffer\n                    ? new TextDecoder().decode(evt.data)\n                    : evt.data;\n                this.debug(`<<< ${rawChunkAsString}`);\n            }\n            parser.parseChunk(evt.data, this.appendMissingNULLonIncoming);\n        };\n        this._webSocket.onclose = (closeEvent) => {\n            this.debug(`Connection closed to ${this._webSocket.url}`);\n            this._cleanUp();\n            this.onWebSocketClose(closeEvent);\n        };\n        this._webSocket.onerror = (errorEvent) => {\n            this.onWebSocketError(errorEvent);\n        };\n        this._webSocket.onopen = () => {\n            // Clone before updating\n            const connectHeaders = Object.assign({}, this.connectHeaders);\n            this.debug('Web Socket Opened...');\n            connectHeaders['accept-version'] = this.stompVersions.supportedVersions();\n            connectHeaders['heart-beat'] = [\n                this.heartbeatOutgoing,\n                this.heartbeatIncoming,\n            ].join(',');\n            this._transmit({ command: 'CONNECT', headers: connectHeaders });\n        };\n    }\n    _setupHeartbeat(headers) {\n        if (headers.version !== _versions_js__WEBPACK_IMPORTED_MODULE_0__.Versions.V1_1 &&\n            headers.version !== _versions_js__WEBPACK_IMPORTED_MODULE_0__.Versions.V1_2) {\n            return;\n        }\n        // It is valid for the server to not send this header\n        // https://stomp.github.io/stomp-specification-1.2.html#Heart-beating\n        if (!headers['heart-beat']) {\n            return;\n        }\n        // heart-beat header received from the server looks like:\n        //\n        //     heart-beat: sx, sy\n        const [serverOutgoing, serverIncoming] = headers['heart-beat']\n            .split(',')\n            .map((v) => parseInt(v, 10));\n        if (this.heartbeatOutgoing !== 0 && serverIncoming !== 0) {\n            const ttl = Math.max(this.heartbeatOutgoing, serverIncoming);\n            this.debug(`send PING every ${ttl}ms`);\n            this._pinger = setInterval(() => {\n                if (this._webSocket.readyState === _types_js__WEBPACK_IMPORTED_MODULE_3__.StompSocketState.OPEN) {\n                    this._webSocket.send(_byte_js__WEBPACK_IMPORTED_MODULE_4__.BYTE.LF);\n                    this.debug('>>> PING');\n                }\n            }, ttl);\n        }\n        if (this.heartbeatIncoming !== 0 && serverOutgoing !== 0) {\n            const ttl = Math.max(this.heartbeatIncoming, serverOutgoing);\n            this.debug(`check PONG every ${ttl}ms`);\n            this._ponger = setInterval(() => {\n                const delta = Date.now() - this._lastServerActivityTS;\n                // We wait twice the TTL to be flexible on window's setInterval calls\n                if (delta > ttl * 2) {\n                    this.debug(`did not receive server activity for the last ${delta}ms`);\n                    this._closeOrDiscardWebsocket();\n                }\n            }, ttl);\n        }\n    }\n    _closeOrDiscardWebsocket() {\n        if (this.discardWebsocketOnCommFailure) {\n            this.debug('Discarding websocket, the underlying socket may linger for a while');\n            this.discardWebsocket();\n        }\n        else {\n            this.debug('Issuing close on the websocket');\n            this._closeWebsocket();\n        }\n    }\n    forceDisconnect() {\n        if (this._webSocket) {\n            if (this._webSocket.readyState === _types_js__WEBPACK_IMPORTED_MODULE_3__.StompSocketState.CONNECTING ||\n                this._webSocket.readyState === _types_js__WEBPACK_IMPORTED_MODULE_3__.StompSocketState.OPEN) {\n                this._closeOrDiscardWebsocket();\n            }\n        }\n    }\n    _closeWebsocket() {\n        this._webSocket.onmessage = () => { }; // ignore messages\n        this._webSocket.close();\n    }\n    discardWebsocket() {\n        if (typeof this._webSocket.terminate !== 'function') {\n            (0,_augment_websocket_js__WEBPACK_IMPORTED_MODULE_5__.augmentWebsocket)(this._webSocket, (msg) => this.debug(msg));\n        }\n        // @ts-ignore - this method will be there at this stage\n        this._webSocket.terminate();\n    }\n    _transmit(params) {\n        const { command, headers, body, binaryBody, skipContentLengthHeader } = params;\n        const frame = new _frame_impl_js__WEBPACK_IMPORTED_MODULE_2__.FrameImpl({\n            command,\n            headers,\n            body,\n            binaryBody,\n            escapeHeaderValues: this._escapeHeaderValues,\n            skipContentLengthHeader,\n        });\n        let rawChunk = frame.serialize();\n        if (this.logRawCommunication) {\n            this.debug(`>>> ${rawChunk}`);\n        }\n        else {\n            this.debug(`>>> ${frame}`);\n        }\n        if (this.forceBinaryWSFrames && typeof rawChunk === 'string') {\n            rawChunk = new TextEncoder().encode(rawChunk);\n        }\n        if (typeof rawChunk !== 'string' || !this.splitLargeFrames) {\n            this._webSocket.send(rawChunk);\n        }\n        else {\n            let out = rawChunk;\n            while (out.length > 0) {\n                const chunk = out.substring(0, this.maxWebSocketChunkSize);\n                out = out.substring(this.maxWebSocketChunkSize);\n                this._webSocket.send(chunk);\n                this.debug(`chunk sent = ${chunk.length}, remaining = ${out.length}`);\n            }\n        }\n    }\n    dispose() {\n        if (this.connected) {\n            try {\n                // clone before updating\n                const disconnectHeaders = Object.assign({}, this.disconnectHeaders);\n                if (!disconnectHeaders.receipt) {\n                    disconnectHeaders.receipt = `close-${this._counter++}`;\n                }\n                this.watchForReceipt(disconnectHeaders.receipt, frame => {\n                    this._closeWebsocket();\n                    this._cleanUp();\n                    this.onDisconnect(frame);\n                });\n                this._transmit({ command: 'DISCONNECT', headers: disconnectHeaders });\n            }\n            catch (error) {\n                this.debug(`Ignoring error during disconnect ${error}`);\n            }\n        }\n        else {\n            if (this._webSocket.readyState === _types_js__WEBPACK_IMPORTED_MODULE_3__.StompSocketState.CONNECTING ||\n                this._webSocket.readyState === _types_js__WEBPACK_IMPORTED_MODULE_3__.StompSocketState.OPEN) {\n                this._closeWebsocket();\n            }\n        }\n    }\n    _cleanUp() {\n        this._connected = false;\n        if (this._pinger) {\n            clearInterval(this._pinger);\n            this._pinger = undefined;\n        }\n        if (this._ponger) {\n            clearInterval(this._ponger);\n            this._ponger = undefined;\n        }\n    }\n    publish(params) {\n        const { destination, headers, body, binaryBody, skipContentLengthHeader } = params;\n        const hdrs = Object.assign({ destination }, headers);\n        this._transmit({\n            command: 'SEND',\n            headers: hdrs,\n            body,\n            binaryBody,\n            skipContentLengthHeader,\n        });\n    }\n    watchForReceipt(receiptId, callback) {\n        this._receiptWatchers[receiptId] = callback;\n    }\n    subscribe(destination, callback, headers = {}) {\n        headers = Object.assign({}, headers);\n        if (!headers.id) {\n            headers.id = `sub-${this._counter++}`;\n        }\n        headers.destination = destination;\n        this._subscriptions[headers.id] = callback;\n        this._transmit({ command: 'SUBSCRIBE', headers });\n        const client = this;\n        return {\n            id: headers.id,\n            unsubscribe(hdrs) {\n                return client.unsubscribe(headers.id, hdrs);\n            },\n        };\n    }\n    unsubscribe(id, headers = {}) {\n        headers = Object.assign({}, headers);\n        delete this._subscriptions[id];\n        headers.id = id;\n        this._transmit({ command: 'UNSUBSCRIBE', headers });\n    }\n    begin(transactionId) {\n        const txId = transactionId || `tx-${this._counter++}`;\n        this._transmit({\n            command: 'BEGIN',\n            headers: {\n                transaction: txId,\n            },\n        });\n        const client = this;\n        return {\n            id: txId,\n            commit() {\n                client.commit(txId);\n            },\n            abort() {\n                client.abort(txId);\n            },\n        };\n    }\n    commit(transactionId) {\n        this._transmit({\n            command: 'COMMIT',\n            headers: {\n                transaction: transactionId,\n            },\n        });\n    }\n    abort(transactionId) {\n        this._transmit({\n            command: 'ABORT',\n            headers: {\n                transaction: transactionId,\n            },\n        });\n    }\n    ack(messageId, subscriptionId, headers = {}) {\n        headers = Object.assign({}, headers);\n        if (this._connectedVersion === _versions_js__WEBPACK_IMPORTED_MODULE_0__.Versions.V1_2) {\n            headers.id = messageId;\n        }\n        else {\n            headers['message-id'] = messageId;\n        }\n        headers.subscription = subscriptionId;\n        this._transmit({ command: 'ACK', headers });\n    }\n    nack(messageId, subscriptionId, headers = {}) {\n        headers = Object.assign({}, headers);\n        if (this._connectedVersion === _versions_js__WEBPACK_IMPORTED_MODULE_0__.Versions.V1_2) {\n            headers.id = messageId;\n        }\n        else {\n            headers['message-id'] = messageId;\n        }\n        headers.subscription = subscriptionId;\n        return this._transmit({ command: 'NACK', headers });\n    }\n}\n//# sourceMappingURL=stomp-handler.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@stomp/stompjs/esm6/stomp-handler.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@stomp/stompjs/esm6/types.js":
/*!***************************************************!*\
  !*** ./node_modules/@stomp/stompjs/esm6/types.js ***!
  \***************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ActivationState: () => (/* binding */ ActivationState),\n/* harmony export */   StompSocketState: () => (/* binding */ StompSocketState)\n/* harmony export */ });\n/**\n * Possible states for the IStompSocket\n */\nvar StompSocketState;\n(function (StompSocketState) {\n    StompSocketState[StompSocketState[\"CONNECTING\"] = 0] = \"CONNECTING\";\n    StompSocketState[StompSocketState[\"OPEN\"] = 1] = \"OPEN\";\n    StompSocketState[StompSocketState[\"CLOSING\"] = 2] = \"CLOSING\";\n    StompSocketState[StompSocketState[\"CLOSED\"] = 3] = \"CLOSED\";\n})(StompSocketState = StompSocketState || (StompSocketState = {}));\n/**\n * Possible activation state\n */\nvar ActivationState;\n(function (ActivationState) {\n    ActivationState[ActivationState[\"ACTIVE\"] = 0] = \"ACTIVE\";\n    ActivationState[ActivationState[\"DEACTIVATING\"] = 1] = \"DEACTIVATING\";\n    ActivationState[ActivationState[\"INACTIVE\"] = 2] = \"INACTIVE\";\n})(ActivationState = ActivationState || (ActivationState = {}));\n//# sourceMappingURL=types.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHN0b21wL3N0b21wanMvZXNtNi90eXBlcy5qcyIsIm1hcHBpbmdzIjoiOzs7OztBQUFBO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUMsK0RBQStEO0FBQ2hFO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDLDREQUE0RDtBQUM3RCIsInNvdXJjZXMiOlsid2VicGFjazovL2Fxb28tZmUvLi9ub2RlX21vZHVsZXMvQHN0b21wL3N0b21wanMvZXNtNi90eXBlcy5qcz9mMDA1Il0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogUG9zc2libGUgc3RhdGVzIGZvciB0aGUgSVN0b21wU29ja2V0XG4gKi9cbmV4cG9ydCB2YXIgU3RvbXBTb2NrZXRTdGF0ZTtcbihmdW5jdGlvbiAoU3RvbXBTb2NrZXRTdGF0ZSkge1xuICAgIFN0b21wU29ja2V0U3RhdGVbU3RvbXBTb2NrZXRTdGF0ZVtcIkNPTk5FQ1RJTkdcIl0gPSAwXSA9IFwiQ09OTkVDVElOR1wiO1xuICAgIFN0b21wU29ja2V0U3RhdGVbU3RvbXBTb2NrZXRTdGF0ZVtcIk9QRU5cIl0gPSAxXSA9IFwiT1BFTlwiO1xuICAgIFN0b21wU29ja2V0U3RhdGVbU3RvbXBTb2NrZXRTdGF0ZVtcIkNMT1NJTkdcIl0gPSAyXSA9IFwiQ0xPU0lOR1wiO1xuICAgIFN0b21wU29ja2V0U3RhdGVbU3RvbXBTb2NrZXRTdGF0ZVtcIkNMT1NFRFwiXSA9IDNdID0gXCJDTE9TRURcIjtcbn0pKFN0b21wU29ja2V0U3RhdGUgPSBTdG9tcFNvY2tldFN0YXRlIHx8IChTdG9tcFNvY2tldFN0YXRlID0ge30pKTtcbi8qKlxuICogUG9zc2libGUgYWN0aXZhdGlvbiBzdGF0ZVxuICovXG5leHBvcnQgdmFyIEFjdGl2YXRpb25TdGF0ZTtcbihmdW5jdGlvbiAoQWN0aXZhdGlvblN0YXRlKSB7XG4gICAgQWN0aXZhdGlvblN0YXRlW0FjdGl2YXRpb25TdGF0ZVtcIkFDVElWRVwiXSA9IDBdID0gXCJBQ1RJVkVcIjtcbiAgICBBY3RpdmF0aW9uU3RhdGVbQWN0aXZhdGlvblN0YXRlW1wiREVBQ1RJVkFUSU5HXCJdID0gMV0gPSBcIkRFQUNUSVZBVElOR1wiO1xuICAgIEFjdGl2YXRpb25TdGF0ZVtBY3RpdmF0aW9uU3RhdGVbXCJJTkFDVElWRVwiXSA9IDJdID0gXCJJTkFDVElWRVwiO1xufSkoQWN0aXZhdGlvblN0YXRlID0gQWN0aXZhdGlvblN0YXRlIHx8IChBY3RpdmF0aW9uU3RhdGUgPSB7fSkpO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dHlwZXMuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@stomp/stompjs/esm6/types.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@stomp/stompjs/esm6/versions.js":
/*!******************************************************!*\
  !*** ./node_modules/@stomp/stompjs/esm6/versions.js ***!
  \******************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Versions: () => (/* binding */ Versions)\n/* harmony export */ });\n/**\n * Supported STOMP versions\n *\n * Part of `@stomp/stompjs`.\n */\nclass Versions {\n    /**\n     * Takes an array of versions, typical elements '1.2', '1.1', or '1.0'\n     *\n     * You will be creating an instance of this class if you want to override\n     * supported versions to be declared during STOMP handshake.\n     */\n    constructor(versions) {\n        this.versions = versions;\n    }\n    /**\n     * Used as part of CONNECT STOMP Frame\n     */\n    supportedVersions() {\n        return this.versions.join(',');\n    }\n    /**\n     * Used while creating a WebSocket\n     */\n    protocolVersions() {\n        return this.versions.map(x => `v${x.replace('.', '')}.stomp`);\n    }\n}\n/**\n * Indicates protocol version 1.0\n */\nVersions.V1_0 = '1.0';\n/**\n * Indicates protocol version 1.1\n */\nVersions.V1_1 = '1.1';\n/**\n * Indicates protocol version 1.2\n */\nVersions.V1_2 = '1.2';\n/**\n * @internal\n */\nVersions.default = new Versions([\n    Versions.V1_2,\n    Versions.V1_1,\n    Versions.V1_0,\n]);\n//# sourceMappingURL=versions.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHN0b21wL3N0b21wanMvZXNtNi92ZXJzaW9ucy5qcyIsIm1hcHBpbmdzIjoiOzs7O0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwwQ0FBMEMsbUJBQW1CO0FBQzdEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9hcW9vLWZlLy4vbm9kZV9tb2R1bGVzL0BzdG9tcC9zdG9tcGpzL2VzbTYvdmVyc2lvbnMuanM/YzQ0YSJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIFN1cHBvcnRlZCBTVE9NUCB2ZXJzaW9uc1xuICpcbiAqIFBhcnQgb2YgYEBzdG9tcC9zdG9tcGpzYC5cbiAqL1xuZXhwb3J0IGNsYXNzIFZlcnNpb25zIHtcbiAgICAvKipcbiAgICAgKiBUYWtlcyBhbiBhcnJheSBvZiB2ZXJzaW9ucywgdHlwaWNhbCBlbGVtZW50cyAnMS4yJywgJzEuMScsIG9yICcxLjAnXG4gICAgICpcbiAgICAgKiBZb3Ugd2lsbCBiZSBjcmVhdGluZyBhbiBpbnN0YW5jZSBvZiB0aGlzIGNsYXNzIGlmIHlvdSB3YW50IHRvIG92ZXJyaWRlXG4gICAgICogc3VwcG9ydGVkIHZlcnNpb25zIHRvIGJlIGRlY2xhcmVkIGR1cmluZyBTVE9NUCBoYW5kc2hha2UuXG4gICAgICovXG4gICAgY29uc3RydWN0b3IodmVyc2lvbnMpIHtcbiAgICAgICAgdGhpcy52ZXJzaW9ucyA9IHZlcnNpb25zO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBVc2VkIGFzIHBhcnQgb2YgQ09OTkVDVCBTVE9NUCBGcmFtZVxuICAgICAqL1xuICAgIHN1cHBvcnRlZFZlcnNpb25zKCkge1xuICAgICAgICByZXR1cm4gdGhpcy52ZXJzaW9ucy5qb2luKCcsJyk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFVzZWQgd2hpbGUgY3JlYXRpbmcgYSBXZWJTb2NrZXRcbiAgICAgKi9cbiAgICBwcm90b2NvbFZlcnNpb25zKCkge1xuICAgICAgICByZXR1cm4gdGhpcy52ZXJzaW9ucy5tYXAoeCA9PiBgdiR7eC5yZXBsYWNlKCcuJywgJycpfS5zdG9tcGApO1xuICAgIH1cbn1cbi8qKlxuICogSW5kaWNhdGVzIHByb3RvY29sIHZlcnNpb24gMS4wXG4gKi9cblZlcnNpb25zLlYxXzAgPSAnMS4wJztcbi8qKlxuICogSW5kaWNhdGVzIHByb3RvY29sIHZlcnNpb24gMS4xXG4gKi9cblZlcnNpb25zLlYxXzEgPSAnMS4xJztcbi8qKlxuICogSW5kaWNhdGVzIHByb3RvY29sIHZlcnNpb24gMS4yXG4gKi9cblZlcnNpb25zLlYxXzIgPSAnMS4yJztcbi8qKlxuICogQGludGVybmFsXG4gKi9cblZlcnNpb25zLmRlZmF1bHQgPSBuZXcgVmVyc2lvbnMoW1xuICAgIFZlcnNpb25zLlYxXzIsXG4gICAgVmVyc2lvbnMuVjFfMSxcbiAgICBWZXJzaW9ucy5WMV8wLFxuXSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD12ZXJzaW9ucy5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@stomp/stompjs/esm6/versions.js\n");

/***/ })

};
;