"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/recoil-persist";
exports.ids = ["vendor-chunks/recoil-persist"];
exports.modules = {

/***/ "(ssr)/./node_modules/recoil-persist/dist/index.js":
/*!***************************************************!*\
  !*** ./node_modules/recoil-persist/dist/index.js ***!
  \***************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.recoilPersist = void 0;\n/**\n * Recoil module to persist state to storage\n *\n * @param config Optional configuration object\n * @param config.key Used as key in local storage, defaults to `recoil-persist`\n * @param config.storage Local storage to use, defaults to `localStorage`\n */\nconst recoilPersist = (config = {}) => {\n    if (typeof window === 'undefined') {\n        return {\n            persistAtom: () => { },\n        };\n    }\n    const { key = 'recoil-persist', storage = localStorage, converter = JSON } = config;\n    const persistAtom = ({ onSet, node, trigger, setSelf }) => {\n        if (trigger === 'get') {\n            const state = getState();\n            if (typeof state.then === 'function') {\n                state.then((s) => {\n                    if (s.hasOwnProperty(node.key)) {\n                        setSelf(s[node.key]);\n                    }\n                });\n            }\n            if (state.hasOwnProperty(node.key)) {\n                setSelf(state[node.key]);\n            }\n        }\n        onSet(async (newValue, _, isReset) => {\n            const state = getState();\n            if (typeof state.then === 'function') {\n                state.then((s) => updateState(newValue, s, node.key, isReset));\n            }\n            else {\n                updateState(newValue, state, node.key, isReset);\n            }\n        });\n    };\n    const updateState = (newValue, state, key, isReset) => {\n        if (isReset) {\n            delete state[key];\n        }\n        else {\n            state[key] = newValue;\n        }\n        setState(state);\n    };\n    const getState = () => {\n        const toParse = storage.getItem(key);\n        if (toParse === null || toParse === undefined) {\n            return {};\n        }\n        if (typeof toParse === 'string') {\n            return parseState(toParse);\n        }\n        if (typeof toParse.then === 'function') {\n            return toParse.then(parseState);\n        }\n        return {};\n    };\n    const parseState = (state) => {\n        if (state === undefined) {\n            return {};\n        }\n        try {\n            return converter.parse(state);\n        }\n        catch (e) {\n            console.error(e);\n            return {};\n        }\n    };\n    const setState = (state) => {\n        try {\n            if (typeof storage.mergeItem === 'function') {\n                storage.mergeItem(key, converter.stringify(state));\n            }\n            else {\n                storage.setItem(key, converter.stringify(state));\n            }\n        }\n        catch (e) {\n            console.error(e);\n        }\n    };\n    return { persistAtom };\n};\nexports.recoilPersist = recoilPersist;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvcmVjb2lsLXBlcnNpc3QvZGlzdC9pbmRleC5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCxxQkFBcUI7QUFDckI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrQ0FBa0M7QUFDbEM7QUFDQTtBQUNBLGtDQUFrQztBQUNsQztBQUNBO0FBQ0EsWUFBWSxtRUFBbUU7QUFDL0UsMkJBQTJCLCtCQUErQjtBQUMxRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQSxxQkFBcUIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9hcW9vLWZlLy4vbm9kZV9tb2R1bGVzL3JlY29pbC1wZXJzaXN0L2Rpc3QvaW5kZXguanM/NWU2OCJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMucmVjb2lsUGVyc2lzdCA9IHZvaWQgMDtcbi8qKlxuICogUmVjb2lsIG1vZHVsZSB0byBwZXJzaXN0IHN0YXRlIHRvIHN0b3JhZ2VcbiAqXG4gKiBAcGFyYW0gY29uZmlnIE9wdGlvbmFsIGNvbmZpZ3VyYXRpb24gb2JqZWN0XG4gKiBAcGFyYW0gY29uZmlnLmtleSBVc2VkIGFzIGtleSBpbiBsb2NhbCBzdG9yYWdlLCBkZWZhdWx0cyB0byBgcmVjb2lsLXBlcnNpc3RgXG4gKiBAcGFyYW0gY29uZmlnLnN0b3JhZ2UgTG9jYWwgc3RvcmFnZSB0byB1c2UsIGRlZmF1bHRzIHRvIGBsb2NhbFN0b3JhZ2VgXG4gKi9cbmNvbnN0IHJlY29pbFBlcnNpc3QgPSAoY29uZmlnID0ge30pID0+IHtcbiAgICBpZiAodHlwZW9mIHdpbmRvdyA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHBlcnNpc3RBdG9tOiAoKSA9PiB7IH0sXG4gICAgICAgIH07XG4gICAgfVxuICAgIGNvbnN0IHsga2V5ID0gJ3JlY29pbC1wZXJzaXN0Jywgc3RvcmFnZSA9IGxvY2FsU3RvcmFnZSwgY29udmVydGVyID0gSlNPTiB9ID0gY29uZmlnO1xuICAgIGNvbnN0IHBlcnNpc3RBdG9tID0gKHsgb25TZXQsIG5vZGUsIHRyaWdnZXIsIHNldFNlbGYgfSkgPT4ge1xuICAgICAgICBpZiAodHJpZ2dlciA9PT0gJ2dldCcpIHtcbiAgICAgICAgICAgIGNvbnN0IHN0YXRlID0gZ2V0U3RhdGUoKTtcbiAgICAgICAgICAgIGlmICh0eXBlb2Ygc3RhdGUudGhlbiA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgICAgIHN0YXRlLnRoZW4oKHMpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHMuaGFzT3duUHJvcGVydHkobm9kZS5rZXkpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBzZXRTZWxmKHNbbm9kZS5rZXldKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHN0YXRlLmhhc093blByb3BlcnR5KG5vZGUua2V5KSkge1xuICAgICAgICAgICAgICAgIHNldFNlbGYoc3RhdGVbbm9kZS5rZXldKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBvblNldChhc3luYyAobmV3VmFsdWUsIF8sIGlzUmVzZXQpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IHN0YXRlID0gZ2V0U3RhdGUoKTtcbiAgICAgICAgICAgIGlmICh0eXBlb2Ygc3RhdGUudGhlbiA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgICAgIHN0YXRlLnRoZW4oKHMpID0+IHVwZGF0ZVN0YXRlKG5ld1ZhbHVlLCBzLCBub2RlLmtleSwgaXNSZXNldCkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgdXBkYXRlU3RhdGUobmV3VmFsdWUsIHN0YXRlLCBub2RlLmtleSwgaXNSZXNldCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH07XG4gICAgY29uc3QgdXBkYXRlU3RhdGUgPSAobmV3VmFsdWUsIHN0YXRlLCBrZXksIGlzUmVzZXQpID0+IHtcbiAgICAgICAgaWYgKGlzUmVzZXQpIHtcbiAgICAgICAgICAgIGRlbGV0ZSBzdGF0ZVtrZXldO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgc3RhdGVba2V5XSA9IG5ld1ZhbHVlO1xuICAgICAgICB9XG4gICAgICAgIHNldFN0YXRlKHN0YXRlKTtcbiAgICB9O1xuICAgIGNvbnN0IGdldFN0YXRlID0gKCkgPT4ge1xuICAgICAgICBjb25zdCB0b1BhcnNlID0gc3RvcmFnZS5nZXRJdGVtKGtleSk7XG4gICAgICAgIGlmICh0b1BhcnNlID09PSBudWxsIHx8IHRvUGFyc2UgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgcmV0dXJuIHt9O1xuICAgICAgICB9XG4gICAgICAgIGlmICh0eXBlb2YgdG9QYXJzZSA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgIHJldHVybiBwYXJzZVN0YXRlKHRvUGFyc2UpO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0eXBlb2YgdG9QYXJzZS50aGVuID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICByZXR1cm4gdG9QYXJzZS50aGVuKHBhcnNlU3RhdGUpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB7fTtcbiAgICB9O1xuICAgIGNvbnN0IHBhcnNlU3RhdGUgPSAoc3RhdGUpID0+IHtcbiAgICAgICAgaWYgKHN0YXRlID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHJldHVybiB7fTtcbiAgICAgICAgfVxuICAgICAgICB0cnkge1xuICAgICAgICAgICAgcmV0dXJuIGNvbnZlcnRlci5wYXJzZShzdGF0ZSk7XG4gICAgICAgIH1cbiAgICAgICAgY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoZSk7XG4gICAgICAgICAgICByZXR1cm4ge307XG4gICAgICAgIH1cbiAgICB9O1xuICAgIGNvbnN0IHNldFN0YXRlID0gKHN0YXRlKSA9PiB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBpZiAodHlwZW9mIHN0b3JhZ2UubWVyZ2VJdGVtID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICAgICAgc3RvcmFnZS5tZXJnZUl0ZW0oa2V5LCBjb252ZXJ0ZXIuc3RyaW5naWZ5KHN0YXRlKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBzdG9yYWdlLnNldEl0ZW0oa2V5LCBjb252ZXJ0ZXIuc3RyaW5naWZ5KHN0YXRlKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoZSk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIHJldHVybiB7IHBlcnNpc3RBdG9tIH07XG59O1xuZXhwb3J0cy5yZWNvaWxQZXJzaXN0ID0gcmVjb2lsUGVyc2lzdDtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/recoil-persist/dist/index.js\n");

/***/ })

};
;